export default [
  {
    "statements": [
      "CREATE TABLE \"house\" (\n  \"id\" TEXT NOT NULL,\n  \"name\" TEXT NOT NULL,\n  CONSTRAINT \"house_pkey\" PRIMARY KEY (\"id\")\n) WITHOUT ROWID;\n",
      "CREATE TABLE \"room\" (\n  \"id\" TEXT NOT NULL,\n  \"name\" TEXT NOT NULL,\n  \"house_id\" TEXT NOT NULL,\n  \"owner_id\" TEXT,\n  CONSTRAINT \"room_house_id_fkey\" FOREIGN KEY (\"house_id\") REFERENCES \"house\" (\"id\") ON DELETE RESTRICT ON UPDATE CASCADE,\n  CONSTRAINT \"room_owner_id_fkey\" FOREIGN KEY (\"owner_id\") REFERENCES \"person\" (\"id\") ON DELETE SET NULL ON UPDATE CASCADE,\n  CONSTRAINT \"level_one_pkey\" PRIMARY KEY (\"id\")\n) WITHOUT ROWID;\n",
      "CREATE TABLE \"box\" (\n  \"id\" TEXT NOT NULL,\n  \"name\" TEXT NOT NULL,\n  \"room_id\" TEXT NOT NULL,\n  CONSTRAINT \"box_room_id_fkey\" FOREIGN KEY (\"room_id\") REFERENCES \"room\" (\"id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"box_pkey\" PRIMARY KEY (\"id\")\n) WITHOUT ROWID;\n",
      "CREATE TABLE \"thing\" (\n  \"id\" TEXT NOT NULL,\n  \"name\" TEXT NOT NULL,\n  \"box_id\" TEXT NOT NULL,\n  CONSTRAINT \"thing_box_id_fkey\" FOREIGN KEY (\"box_id\") REFERENCES \"box\" (\"id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"thing_pkey\" PRIMARY KEY (\"id\")\n) WITHOUT ROWID;\n",
      "CREATE TABLE \"person\" (\n  \"id\" TEXT NOT NULL,\n  \"name\" TEXT NOT NULL,\n  CONSTRAINT \"person_pkey\" PRIMARY KEY (\"id\")\n) WITHOUT ROWID;\n",
      "CREATE TABLE \"box_user\" (\n  \"id\" TEXT NOT NULL,\n  \"person_id\" TEXT NOT NULL,\n  CONSTRAINT \"box_user_id_fkey\" FOREIGN KEY (\"id\") REFERENCES \"box\" (\"id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"box_user_person_id_fkey\" FOREIGN KEY (\"person_id\") REFERENCES \"person\" (\"id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"box_user_pkey\" PRIMARY KEY (\"id\", \"person_id\")\n) WITHOUT ROWID;\n",
      "CREATE INDEX \"box_user_person_id_idx\" ON \"box_user\" (\"person_id\" ASC);\n",
      "CREATE TABLE \"room_user\" (\n  \"id\" TEXT NOT NULL,\n  \"person_id\" TEXT NOT NULL,\n  CONSTRAINT \"room_user_id_fkey\" FOREIGN KEY (\"id\") REFERENCES \"room\" (\"id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"room_user_person_id_fkey\" FOREIGN KEY (\"person_id\") REFERENCES \"person\" (\"id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"room_user_pkey\" PRIMARY KEY (\"id\", \"person_id\")\n) WITHOUT ROWID;\n",
      "CREATE INDEX \"room_user_person_id_idx\" ON \"room_user\" (\"person_id\" ASC);\n",
      "-- Toggles for turning the triggers on and off\nINSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.house', 1);",
      "  /* Triggers for table house */\n\n  -- ensures primary key is immutable\n  DROP TRIGGER IF EXISTS update_ensure_main_house_primarykey;",
      "CREATE TRIGGER update_ensure_main_house_primarykey\n  BEFORE UPDATE ON \"main\".\"house\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"id\" != new.\"id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column id as it belongs to the primary key')\n    END;\nEND;",
      "-- Triggers that add INSERT, UPDATE, DELETE operation to the _opslog table\nDROP TRIGGER IF EXISTS insert_main_house_into_oplog;",
      "CREATE TRIGGER insert_main_house_into_oplog\n   AFTER INSERT ON \"main\".\"house\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.house')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'house', 'INSERT', json_object('id', new.\"id\"), json_object('id', new.\"id\", 'name', new.\"name\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_house_into_oplog;",
      "CREATE TRIGGER update_main_house_into_oplog\n   AFTER UPDATE ON \"main\".\"house\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.house')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'house', 'UPDATE', json_object('id', new.\"id\"), json_object('id', new.\"id\", 'name', new.\"name\"), json_object('id', old.\"id\", 'name', old.\"name\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_house_into_oplog;",
      "CREATE TRIGGER delete_main_house_into_oplog\n   AFTER DELETE ON \"main\".\"house\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.house')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'house', 'DELETE', json_object('id', old.\"id\"), NULL, json_object('id', old.\"id\", 'name', old.\"name\"), NULL);\nEND;",
      "-- Toggles for turning the triggers on and off\nINSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.room', 1);",
      "  /* Triggers for table room */\n\n  -- ensures primary key is immutable\n  DROP TRIGGER IF EXISTS update_ensure_main_room_primarykey;",
      "CREATE TRIGGER update_ensure_main_room_primarykey\n  BEFORE UPDATE ON \"main\".\"room\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"id\" != new.\"id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column id as it belongs to the primary key')\n    END;\nEND;",
      "-- Triggers that add INSERT, UPDATE, DELETE operation to the _opslog table\nDROP TRIGGER IF EXISTS insert_main_room_into_oplog;",
      "CREATE TRIGGER insert_main_room_into_oplog\n   AFTER INSERT ON \"main\".\"room\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.room')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'room', 'INSERT', json_object('id', new.\"id\"), json_object('house_id', new.\"house_id\", 'id', new.\"id\", 'name', new.\"name\", 'owner_id', new.\"owner_id\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_room_into_oplog;",
      "CREATE TRIGGER update_main_room_into_oplog\n   AFTER UPDATE ON \"main\".\"room\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.room')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'room', 'UPDATE', json_object('id', new.\"id\"), json_object('house_id', new.\"house_id\", 'id', new.\"id\", 'name', new.\"name\", 'owner_id', new.\"owner_id\"), json_object('house_id', old.\"house_id\", 'id', old.\"id\", 'name', old.\"name\", 'owner_id', old.\"owner_id\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_room_into_oplog;",
      "CREATE TRIGGER delete_main_room_into_oplog\n   AFTER DELETE ON \"main\".\"room\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.room')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'room', 'DELETE', json_object('id', old.\"id\"), NULL, json_object('house_id', old.\"house_id\", 'id', old.\"id\", 'name', old.\"name\", 'owner_id', old.\"owner_id\"), NULL);\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_room_house_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_room_house_id_into_oplog\n  AFTER INSERT ON \"main\".\"room\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.house') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'house', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"house\" WHERE \"id\" = new.\"house_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_room_house_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_room_house_id_into_oplog\n   AFTER UPDATE ON \"main\".\"room\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.house') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'house', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"house\" WHERE \"id\" = new.\"house_id\";\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_room_owner_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_room_owner_id_into_oplog\n  AFTER INSERT ON \"main\".\"room\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.person') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'person', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"person\" WHERE \"id\" = new.\"owner_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_room_owner_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_room_owner_id_into_oplog\n   AFTER UPDATE ON \"main\".\"room\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.person') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'person', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"person\" WHERE \"id\" = new.\"owner_id\";\nEND;",
      "-- Toggles for turning the triggers on and off\nINSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.box', 1);",
      "  /* Triggers for table box */\n\n  -- ensures primary key is immutable\n  DROP TRIGGER IF EXISTS update_ensure_main_box_primarykey;",
      "CREATE TRIGGER update_ensure_main_box_primarykey\n  BEFORE UPDATE ON \"main\".\"box\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"id\" != new.\"id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column id as it belongs to the primary key')\n    END;\nEND;",
      "-- Triggers that add INSERT, UPDATE, DELETE operation to the _opslog table\nDROP TRIGGER IF EXISTS insert_main_box_into_oplog;",
      "CREATE TRIGGER insert_main_box_into_oplog\n   AFTER INSERT ON \"main\".\"box\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.box')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'box', 'INSERT', json_object('id', new.\"id\"), json_object('id', new.\"id\", 'name', new.\"name\", 'room_id', new.\"room_id\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_box_into_oplog;",
      "CREATE TRIGGER update_main_box_into_oplog\n   AFTER UPDATE ON \"main\".\"box\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.box')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'box', 'UPDATE', json_object('id', new.\"id\"), json_object('id', new.\"id\", 'name', new.\"name\", 'room_id', new.\"room_id\"), json_object('id', old.\"id\", 'name', old.\"name\", 'room_id', old.\"room_id\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_box_into_oplog;",
      "CREATE TRIGGER delete_main_box_into_oplog\n   AFTER DELETE ON \"main\".\"box\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.box')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'box', 'DELETE', json_object('id', old.\"id\"), NULL, json_object('id', old.\"id\", 'name', old.\"name\", 'room_id', old.\"room_id\"), NULL);\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_box_room_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_box_room_id_into_oplog\n  AFTER INSERT ON \"main\".\"box\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.room') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'room', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"room\" WHERE \"id\" = new.\"room_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_box_room_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_box_room_id_into_oplog\n   AFTER UPDATE ON \"main\".\"box\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.room') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'room', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"room\" WHERE \"id\" = new.\"room_id\";\nEND;",
      "-- Toggles for turning the triggers on and off\nINSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.thing', 1);",
      "  /* Triggers for table thing */\n\n  -- ensures primary key is immutable\n  DROP TRIGGER IF EXISTS update_ensure_main_thing_primarykey;",
      "CREATE TRIGGER update_ensure_main_thing_primarykey\n  BEFORE UPDATE ON \"main\".\"thing\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"id\" != new.\"id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column id as it belongs to the primary key')\n    END;\nEND;",
      "-- Triggers that add INSERT, UPDATE, DELETE operation to the _opslog table\nDROP TRIGGER IF EXISTS insert_main_thing_into_oplog;",
      "CREATE TRIGGER insert_main_thing_into_oplog\n   AFTER INSERT ON \"main\".\"thing\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.thing')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'thing', 'INSERT', json_object('id', new.\"id\"), json_object('box_id', new.\"box_id\", 'id', new.\"id\", 'name', new.\"name\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_thing_into_oplog;",
      "CREATE TRIGGER update_main_thing_into_oplog\n   AFTER UPDATE ON \"main\".\"thing\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.thing')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'thing', 'UPDATE', json_object('id', new.\"id\"), json_object('box_id', new.\"box_id\", 'id', new.\"id\", 'name', new.\"name\"), json_object('box_id', old.\"box_id\", 'id', old.\"id\", 'name', old.\"name\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_thing_into_oplog;",
      "CREATE TRIGGER delete_main_thing_into_oplog\n   AFTER DELETE ON \"main\".\"thing\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.thing')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'thing', 'DELETE', json_object('id', old.\"id\"), NULL, json_object('box_id', old.\"box_id\", 'id', old.\"id\", 'name', old.\"name\"), NULL);\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_thing_box_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_thing_box_id_into_oplog\n  AFTER INSERT ON \"main\".\"thing\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.box') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'box', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"box\" WHERE \"id\" = new.\"box_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_thing_box_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_thing_box_id_into_oplog\n   AFTER UPDATE ON \"main\".\"thing\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.box') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'box', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"box\" WHERE \"id\" = new.\"box_id\";\nEND;",
      "-- Toggles for turning the triggers on and off\nINSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.person', 1);",
      "  /* Triggers for table person */\n\n  -- ensures primary key is immutable\n  DROP TRIGGER IF EXISTS update_ensure_main_person_primarykey;",
      "CREATE TRIGGER update_ensure_main_person_primarykey\n  BEFORE UPDATE ON \"main\".\"person\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"id\" != new.\"id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column id as it belongs to the primary key')\n    END;\nEND;",
      "-- Triggers that add INSERT, UPDATE, DELETE operation to the _opslog table\nDROP TRIGGER IF EXISTS insert_main_person_into_oplog;",
      "CREATE TRIGGER insert_main_person_into_oplog\n   AFTER INSERT ON \"main\".\"person\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.person')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'person', 'INSERT', json_object('id', new.\"id\"), json_object('id', new.\"id\", 'name', new.\"name\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_person_into_oplog;",
      "CREATE TRIGGER update_main_person_into_oplog\n   AFTER UPDATE ON \"main\".\"person\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.person')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'person', 'UPDATE', json_object('id', new.\"id\"), json_object('id', new.\"id\", 'name', new.\"name\"), json_object('id', old.\"id\", 'name', old.\"name\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_person_into_oplog;",
      "CREATE TRIGGER delete_main_person_into_oplog\n   AFTER DELETE ON \"main\".\"person\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.person')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'person', 'DELETE', json_object('id', old.\"id\"), NULL, json_object('id', old.\"id\", 'name', old.\"name\"), NULL);\nEND;",
      "-- Toggles for turning the triggers on and off\nINSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.box_user', 1);",
      "  /* Triggers for table box_user */\n\n  -- ensures primary key is immutable\n  DROP TRIGGER IF EXISTS update_ensure_main_box_user_primarykey;",
      "CREATE TRIGGER update_ensure_main_box_user_primarykey\n  BEFORE UPDATE ON \"main\".\"box_user\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"id\" != new.\"id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column id as it belongs to the primary key')\n      WHEN old.\"person_id\" != new.\"person_id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column person_id as it belongs to the primary key')\n    END;\nEND;",
      "-- Triggers that add INSERT, UPDATE, DELETE operation to the _opslog table\nDROP TRIGGER IF EXISTS insert_main_box_user_into_oplog;",
      "CREATE TRIGGER insert_main_box_user_into_oplog\n   AFTER INSERT ON \"main\".\"box_user\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.box_user')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'box_user', 'INSERT', json_object('id', new.\"id\", 'person_id', new.\"person_id\"), json_object('id', new.\"id\", 'person_id', new.\"person_id\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_box_user_into_oplog;",
      "CREATE TRIGGER update_main_box_user_into_oplog\n   AFTER UPDATE ON \"main\".\"box_user\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.box_user')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'box_user', 'UPDATE', json_object('id', new.\"id\", 'person_id', new.\"person_id\"), json_object('id', new.\"id\", 'person_id', new.\"person_id\"), json_object('id', old.\"id\", 'person_id', old.\"person_id\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_box_user_into_oplog;",
      "CREATE TRIGGER delete_main_box_user_into_oplog\n   AFTER DELETE ON \"main\".\"box_user\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.box_user')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'box_user', 'DELETE', json_object('id', old.\"id\", 'person_id', old.\"person_id\"), NULL, json_object('id', old.\"id\", 'person_id', old.\"person_id\"), NULL);\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_box_user_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_box_user_id_into_oplog\n  AFTER INSERT ON \"main\".\"box_user\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.box') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'box', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"box\" WHERE \"id\" = new.\"id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_box_user_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_box_user_id_into_oplog\n   AFTER UPDATE ON \"main\".\"box_user\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.box') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'box', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"box\" WHERE \"id\" = new.\"id\";\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_box_user_person_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_box_user_person_id_into_oplog\n  AFTER INSERT ON \"main\".\"box_user\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.person') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'person', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"person\" WHERE \"id\" = new.\"person_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_box_user_person_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_box_user_person_id_into_oplog\n   AFTER UPDATE ON \"main\".\"box_user\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.person') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'person', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"person\" WHERE \"id\" = new.\"person_id\";\nEND;",
      "-- Toggles for turning the triggers on and off\nINSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.room_user', 1);",
      "  /* Triggers for table room_user */\n\n  -- ensures primary key is immutable\n  DROP TRIGGER IF EXISTS update_ensure_main_room_user_primarykey;",
      "CREATE TRIGGER update_ensure_main_room_user_primarykey\n  BEFORE UPDATE ON \"main\".\"room_user\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"id\" != new.\"id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column id as it belongs to the primary key')\n      WHEN old.\"person_id\" != new.\"person_id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column person_id as it belongs to the primary key')\n    END;\nEND;",
      "-- Triggers that add INSERT, UPDATE, DELETE operation to the _opslog table\nDROP TRIGGER IF EXISTS insert_main_room_user_into_oplog;",
      "CREATE TRIGGER insert_main_room_user_into_oplog\n   AFTER INSERT ON \"main\".\"room_user\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.room_user')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'room_user', 'INSERT', json_object('id', new.\"id\", 'person_id', new.\"person_id\"), json_object('id', new.\"id\", 'person_id', new.\"person_id\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_room_user_into_oplog;",
      "CREATE TRIGGER update_main_room_user_into_oplog\n   AFTER UPDATE ON \"main\".\"room_user\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.room_user')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'room_user', 'UPDATE', json_object('id', new.\"id\", 'person_id', new.\"person_id\"), json_object('id', new.\"id\", 'person_id', new.\"person_id\"), json_object('id', old.\"id\", 'person_id', old.\"person_id\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_room_user_into_oplog;",
      "CREATE TRIGGER delete_main_room_user_into_oplog\n   AFTER DELETE ON \"main\".\"room_user\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.room_user')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'room_user', 'DELETE', json_object('id', old.\"id\", 'person_id', old.\"person_id\"), NULL, json_object('id', old.\"id\", 'person_id', old.\"person_id\"), NULL);\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_room_user_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_room_user_id_into_oplog\n  AFTER INSERT ON \"main\".\"room_user\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.room') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'room', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"room\" WHERE \"id\" = new.\"id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_room_user_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_room_user_id_into_oplog\n   AFTER UPDATE ON \"main\".\"room_user\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.room') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'room', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"room\" WHERE \"id\" = new.\"id\";\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_room_user_person_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_room_user_person_id_into_oplog\n  AFTER INSERT ON \"main\".\"room_user\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.person') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'person', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"person\" WHERE \"id\" = new.\"person_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_room_user_person_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_room_user_person_id_into_oplog\n   AFTER UPDATE ON \"main\".\"room_user\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.person') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'person', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"person\" WHERE \"id\" = new.\"person_id\";\nEND;"
    ],
    "version": "0001-create-mock-tables"
  }
]